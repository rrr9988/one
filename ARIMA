 import pandas as pd
 import matplotlib.pyplot as plt
 from statsmodels.tsa.arima.model import ARIMA
 from sklearn.metrics import mean_absolute_error, mean_squared_error
 import numpy as np
 # Load the Air Passenger dataset
 url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'
 df = pd.read_csv(url)
 # Convert the 'Month' column to datetime
 df['Month'] = pd.to_datetime(df['Month'])
 # Set the 'Month' column as the index
 df.set_index('Month', inplace=True)
 # Plot the time series data
 plt.figure(figsize=(10, 5))
 plt.plot(df.index, df['Passengers'], label='Passengers')
 plt.xlabel('Time')
 plt.ylabel('Number of Passengers')
 plt.title('Monthly Number of Air Passengers')
 plt.legend()
 plt.show()

 # Fit ARIMA(1,1,1) model
 model_arima = ARIMA(df['Passengers'], order=(1, 1, 1)).fit()
 predictions_arima = model_arima.forecast(steps=12)
 # Plot ARIMA(1,1,1) predictions
 plt.figure(figsize=(10, 5))
 plt.plot(df.index, df['Passengers'], label='Passengers')
 plt.plot(predictions_arima.index, predictions_arima, label='ARIMA(1,1,1) Predictions', color='red')
 plt.xlabel('Time')
 plt.ylabel('Number of Passengers')
 plt.title('ARIMA(1,1,1) Model Predictions')
 plt.legend()
 plt.show()
 # Calculate evaluation metrics for ARIMA(1,1,1)
 arima_mae = mean_absolute_error(df['Passengers'][-12:], predictions_arima)
 arima_mse = mean_squared_error(df['Passengers'][-12:], predictions_arima)
 arima_rmse = np.sqrt(arima_mse)
 print(f'ARIMA(1,1,1) MAE: {arima_mae:.2f}')
 print(f'ARIMA(1,1,1) MSE: {arima_mse:.2f}')
 print(f'ARIMA(1,1,1) RMSE: {arima_rmse:.2f}')

:
# Plot ARIMA(2,1,2) predictions
 plt.figure(figsize=(10, 5))
 plt.plot(df.index, df['Passengers'], label='Passengers')
 plt.plot(predictions_arima_212.index, predictions_arima_212, label='ARIMA(2,1,2) Predictions', color='green'
 plt.xlabel('Time')
 plt.ylabel('Number of Passengers')
 plt.title('ARIMA(2,1,2) Model Predictions')
 plt.legend()
 plt.show()
 # Calculate evaluation metrics for ARIMA(2,1,2)
 arima_212_mae = mean_absolute_error(df['Passengers'][-12:], predictions_arima_212)
 arima_212_mse = mean_squared_error(df['Passengers'][-12:], predictions_arima_212)
 arima_212_rmse = np.sqrt(arima_212_mse)
 print(f'ARIMA(2,1,2) MAE: {arima_212_mae:.2f}')
 print(f'ARIMA(2,1,2) MSE: {arima_212_mse:.2f}')
 print(f'ARIMA(2,1,2) RMSE: {arima_212_rmse:.2f}')
 # Fit ARIMA(3,1,3) model
 model_arima_313 = ARIMA(df['Passengers'], order=(3, 1, 3)).fit()
 predictions_arima_313 = model_arima_313.forecast(steps=12)
 # Plot ARIMA(3,1,3) predictions
 plt.figure(figsize=(10, 5))
 plt.plot(df.index, df['Passengers'], label='Passengers')
 plt.plot(predictions_arima_313.index, predictions_arima_313, label='ARIMA(3,1,3) Predictions', color='purple
 plt.xlabel('Time')
 plt.ylabel('Number of Passengers')
 plt.title('ARIMA(3,1,3) Model Predictions')
 plt.legend()
 plt.show()
 # Calculate evaluation metrics for ARIMA(3,1,3)
 arima_313_mae = mean_absolute_error(df['Passengers'][-12:], predictions_arima_313)
 arima_313_mse = mean_squared_error(df['Passengers'][-12:], predictions_arima_313)
 arima_313_rmse = np.sqrt(arima_313_mse)
 print(f'ARIMA(3,1,3) MAE: {arima_313_mae:.2f}')
 print(f'ARIMA(3,1,3) MSE: {arima_313_mse:.2f}')
 print(f'ARIMA(3,1,3) RMSE: {arima_313_rmse:.2f}')
